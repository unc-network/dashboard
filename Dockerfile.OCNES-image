# Use official Python image from hub.docker.com
FROM python

# NOTE:  To fully mimic production, we can set tags to match specific versions
#        of things like Python.
#        Also be aware that trying to use python:3-alpine will fail due to the
#        need for additional packages for LDAP/etc. Hence using stock image.

# Install needed modules so LDAP bits in pip modules will install properly
RUN apt-get update
RUN apt-get -y install libsasl2-dev python3-dev libldap2-dev libssl-dev

RUN cd /

# Since this Dockerfile is used specifically by GitLab CI/CD and Kaniko to
# create an image to run in our K3s environ, we cannot mount a local file
# system. So we need to copy the project files into the container's file
# system to exposes things like the requirements.txt file so we can install
# all the relevant Python modules for this project
COPY . /dashboard/
RUN pip install --upgrade pip
RUN pip install -r /dashboard/requirements.txt
RUN pip install gunicorn

RUN cd /dashboard
WORKDIR /dashboard

EXPOSE 8000

# Make sure the basics are all in place
# RUN python3 manage.py createcachetable
RUN python3 manage.py makemigrations
# RUN python3 manage.py migrate
RUN python3 manage.py collectstatic

# Start Gunicorn processes

# Note the additional flag --forwarded-allow-ips="*" is needed because
# by default gunicorn only allows 127.0.0.1 to handle set secure headers.
# As we will run this image in a K3s environ where Traefik is acting as
# the reverse proxy, we do not know Traefik's IP in advance, and gunicorn
# is isolated from the outside world, we can disable this limitation.
# https://docs.gunicorn.org/en/latest/settings.html#forwarded-allow-ips
RUN echo "Starting Gunicorn..."

CMD [ "gunicorn", "--forwarded-allow-ips='*'", "--bind=0.0.0.0:8000", "wsgi"]
