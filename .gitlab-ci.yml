# List of stages for jobs, and their order of execution
# All jobs within a stage run in parallel
stages:
  - build
  - test
  - deploy

# workflow:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "$CI_DEFAULT_BRANCH"
    # - if: $CI_COMMIT_BRANCH == "main"
    ### NOTE:  Temporarily commenting out previous line to trigger pipeline runs in testing

# Define variables needed by the various jobs
# variables:
  # Tell Docker CLI how to talk to Docker daemon
  # DOCKER_HOST: tcp://dockerdaemon:2375
  # DOCKER_HOST: tcp://localhost:2375
  # # Use the overlayfs driver for improved performance
  # DOCKER_DRIVER: overlay2
  # # Disable TLS since we're running inside local network
  # DOCKER_TLS_CERTDIR: ""
  # POSTGRES_DB: $POSTGRES_DB
  # POSTGRES_USER: $POSTGRES_USER
  # POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  # POSTGRES_HOST_AUTH_METHOD: trust

# Define default settings that apply to all jobs unless overridden
default:
  image: python:3
  # image: rockylinux:8
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  services:
    - postgres:15
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    # Install needed modules so LDAP bits in pip modules will install properly
    - apt-get update
    - apt-get -y install libsasl2-dev python3-dev libldap2-dev libssl-dev
    - pip3 install --upgrade pip
    - pip3 install --user -r requirements.txt

# Stage 1:  Build the app
migrations:
  stage: build
  script:
    - python3 manage.py makemigrations
    # - python3 manage.py makemigrations myapp
    - python3 manage.py migrate
    - python3 manage.py check

# Stage 2:  Test the app
django-tests:
  stage: test
  script:
    # The following is from Django + MySQL example template; leaving 'til I figure out what I need to do here
    # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
    # - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
    # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
    - python3 manage.py test

# If the previous stages all succeeded, then it is time to build the containers to run in production

# Stage 3:  Create OCNES image
build-ocnes-image:
  stage: deploy
  environment: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  before_script:
    - echo "Disabling CI/CD default settings"
  script:
    - echo "Building OCNES image..."
    - echo "CI_COMMIT_BRANCH = ${CI_COMMIT_BRANCH}"
    - echo "CI_COMMIT_SHORT_SHA = ${CI_COMMIT_SHORT_SHA}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile.OCNES-image"
      --destination "${CI_REGISTRY_IMAGE}/ocnes:${CI_COMMIT_BRANCH}-${CI_COMMIT_TIMESTAMP:0:13}${CI_COMMIT_TIMESTAMP:14:2}-${CI_COMMIT_SHORT_SHA}"
  # rules:
  #   - if: $CI_COMMIT_TAG


# Stage 3:  Create Celery image if Dockerfile.Celery changes
build-celery-image:
  stage: deploy
  environment: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  before_script:
    - echo "Disabling CI/CD default settings"
  script:
    - echo "Building Celery image..."
    - echo "CI_COMMIT_BRANCH = ${CI_COMMIT_BRANCH}"
    - echo "CI_COMMIT_SHORT_SHA = ${CI_COMMIT_SHORT_SHA}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile.Celery-image"
      --destination "${CI_REGISTRY_IMAGE}/celery:${CI_COMMIT_BRANCH}-${CI_COMMIT_TIMESTAMP:0:13}${CI_COMMIT_TIMESTAMP:14:2}-${CI_COMMIT_SHORT_SHA}"
  # only:
  #   changes:
  #     - Dockerfile.Celery-image


# References:
# From GitLab example templates: https://gitlab.com/gitlab-org/gitlab-foss/tree/master/lib/gitlab/ci/templates
# - Testing Django with MySQL: https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Django.gitlab-ci.yml
# - https://docs.gitlab.com/ee/ci/services/postgres.html
# - For container image creation: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
